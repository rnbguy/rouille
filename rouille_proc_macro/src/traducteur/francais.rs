use crate::Rouille;

pub struct Francais;

impl Rouille for Francais {
    fn traduire(ident_str: &str) -> Option<&str> {
        Some(match ident_str {
            "Arf" => "Err",
            "Bien" => "Ok",
            "Chaine" => "String",
            "Dictionnaire" => "HashMap",
            "Défaut" => "Default",
            "Erreur" => "Error",
            "PeutÊtre" => "Option",
            "Quelque" => "Some",
            "Rien" => "None",
            "Résultat" => "Result",
            "Soi" => "Self",
            "affiche" => "println",
            "arrête" => "break",
            "asynchrone" => "async",
            "attend" => "await",
            "boucle" => "loop",
            "bouge" => "move",
            "cagette" => "crate",
            "code_inaccessible" => "unreachable_code",
            "comme" => "as",
            "constant" => "const",
            "convention" => "trait",
            "dangereux" => "unsafe",
            "de" => "in",
            "depuis" => "from",
            "dynamique" => "dyn",
            "déballer" => "unwrap",
            "défaut" => "default",
            "en_réf" => "as_ref",
            "es" => "io",
            "externe" => "extern",
            "faux" => "false",
            "fonction" => "fn",
            "génial" => "super",
            "insérer" => "insert",
            "lire" => "get",
            "légal" => "allow",
            "merde" | "calisse" | "oups" => "panic",
            "module" => "mod",
            "mutable" => "mut",
            "nouveau" => "new",
            "où" => "where",
            "pour" => "for",
            "prendre_ou_insérer_avec" => "get_or_insert_with",
            "principale" => "main",
            "public" => "pub",
            "que" => None?,
            "renvoie" => "return",
            "réalisation" => "impl",
            "réf" => "ref",
            "selon" => "match",
            "si" => "if",
            "sinon" => "else",
            "soi" => "self",
            "soit" => "let",
            "statique" => "static",
            "structure" => "struct",
            "suppose" => "expect",
            "tant" => "while",
            "utilisons" => "use",
            "vers" => "into",
            "vrai" => "true",
            "énumération" => "enum",

            _ => ident_str,
        })
    }
}
